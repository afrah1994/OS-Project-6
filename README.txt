How the program works :

Each user has its own queue to put requests in. The user has to wait for a request to be granted before making more requests.The OSS periodically increments the clock and checks the queues for any request. The page table values are all initially -1 indicating that, that page has not been put into frame yet. The pages are numbered 0-32. The frames are numbered 0-256. There are separate page tables and main memory arrays for LRU and FIFO. FIFO main memory table just has the user pid for which page table it is holding and they page number. Whereas, The LRU has the user pid, page number, last time it was accessed (seconds and nanoseconds). I am using timestamps to implement LRU in my program. I initially added additional reference byte in my program and then removed it since I wasn't really using it, I am only using the timestamps to find the least recently used during page replacement. Reference byte was causing more confusion.

Things to keep in mind when running the project:

Since there are 256 frames you can only see page replacement when you increase the alarm to like 25 ( line 368 in OSS) . Also since the memory access arequests are random and not according to principle of locality sometimes LRU has more page faults than FIFO. Another thing to notice because of this is the access speeds are also almost always same. But I'm sure if the requests did follow principle of locality there would be less page faults in LRU and better access speed. I really wanted to implement pre-paging in my program but I am out of time and I really need to start working on the final test. I wanted you to see some action (page replacement , page fault) so I made the chance of user terminating very very low. Because other wise its even harder to see page replacement. I am printing all the page tables everytime the OSS empties out the queues and only the filled frames (because otherwise there would be too many lines with just 0's). You might see the output racing on the screen (which may indicate a infinite loop) but it always stops as soon as the alarm rings (I've tested this out). I've added signal handling when you press ctrl+c but for some reason it doesn't work on winscp but it works on putty.

Thank you for all your help this semester!

